all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error$MAF
all_error$MAF
all_error
all_error <- as_tibble(error5<=0.05)
all_error
all_error <- as_tibble(r5<=0.05)
all_error
r5
error5
error5
error5 %>% mutate(proposed_1 = proposed_1<=0.05, proposed_2 = proposed_2<=0.05, oracle_p = oracle_p<=0.05, oracle_error = oracle_error<=0.05)
all_error <- error5 %>% mutate(proposed_1 = proposed_1<=0.05, proposed_2 = proposed_2<=0.05, oracle_p = oracle_p<=0.05, oracle_error = oracle_error<=0.05)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.2","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.4", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.4, "0.4-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed_1 = mean(proposed_1), proposed_2 = mean(proposed_2), oracle = mean(oracle_p), oracle_error = mean(oracle_error), number = n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
knitr::opts_chunk$set
?knitr::opts_chunk$set
?Compare_Aggreg_type1_error_auxiliary
Compare_Aggreg_type1_error_auxiliary
knitr::opts_chunk$set(echo = TRUE, dev = 'png', message = F, warning = F)
library(tidyverse)
library(lme4)
library(bigsnpr)
library(bigstatsr)
library(dplyr)
library(nlme)
library(aod)
library(qqman)
library(foreach)
library(doParallel)
sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3)])
error5
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_valule, color = Type)) + geom_histogram(color = "blackblue", fill = "lightblue")
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, color = Type)) + geom_histogram(color = "blackblue", fill = "lightblue")
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, color = Type)) + geom_histogram(color = "darkblue", fill = "lightblue")
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, color = Type)) + geom_histogram()
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram()
error3 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram()
error1 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram()
error3 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram()
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram()
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram() + facet_grid(~MAF_level)
error5
all_error
error5$MAF_level <- ifelse(error5$MAF >= 0.1, "0.1-0.2","0.05-0.1")
error5$MAF_level <- ifelse(error5$MAF >= 0.2, "0.2-0.3", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.3, "0.3-0.4", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.4, "0.4-0.5", error5$MAF_level)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram() + facet_grid(~MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.1, "0.1-0.2","0.05-0.1")
error5$MAF_level <- ifelse(error5$MAF >= 0.2, "0.2-0.3", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.3, "0.3-0.4", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.4, "0.4-0.5", error5$MAF_level)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram(bins = 20) + facet_grid(~MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.1, "0.1-0.2","0.05-0.1")
error5$MAF_level <- ifelse(error5$MAF >= 0.2, "0.2-0.3", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.3, "0.3-0.4", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.4, "0.4-0.5", error5$MAF_level)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram(bins = 10) + facet_grid(~MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.1, "0.1-0.2","0.05-0.1")
error5$MAF_level <- ifelse(error5$MAF >= 0.2, "0.2-0.3", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.3, "0.3-0.4", error5$MAF_level)
error5$MAF_level <- ifelse(error5$MAF >= 0.4, "0.4-0.5", error5$MAF_level)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram(bins = 5) + facet_grid(~MAF_level)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value)) + geom_histogram(bins = 5) + facet_grid(~MAF_level+Type)
error5 %>% pivot_longer(proposed_1:oracle_error, names_to = "Type", values_to = "p_value") %>% ggplot(aes(x = p_value, fill = Type)) + geom_histogram(bins = 5) + facet_grid(~MAF_level)
a <- 3
a == NULL
is.null(a)
### Function
Compare_Aggreg_power_auxiliary <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.2, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:k) {
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + betaZ * Z + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
tibble(proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
Compare_Aggreg_type1_error_auxiliary <- function(sample = 500, G_using, POS_using, effective_gene, b0 = -1,bE = 0.1, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4, MAF){
result <- tibble()
samp_col <- sample(1:ncol(G_using), size = sample, replace = F)
Do_once <- function(G_using, MyPOS_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
if(is.null(effective_gene)) {y_lat <- b0 + bE*E + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
else{y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
case_new <- ifelse(y_lat > 0, 1, 0)
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:length(samp_col)) {
Gi <- G_using[,samp_col[i]]
if(length(unique(Gi)) != 3 | samp_col[i] == which(POS_using == effective_gene)){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
p_vals_P2[i] <- 1
p_vals_P3[i] <- 1
p_vals_P0[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
}
result_P_INT <- dplyr::tibble(BP = POS_using[samp_col], proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle_p = p_vals_P2, oracle_error = p_vals_P3, MAF = MAF[samp_col])
}
Do_once(G_using, POS_using, effective_gene, bG, bint1, sigmaE)
}
pval <- Compare_Aggreg_type1_error_auxiliary(sample = ncol(G), effective_gene = NULL, MAF = MAF)
ncol(G_using)
POS_using
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
POS_EFF
POS_EFF
r1 <- error1 %>% filter(BP != POS_EFF5) %>% select(proposed_1:oracle_error)
r1 <- apply(r1<= 5 * (10 ^ -2), 2, mean)
r1
### Function
Compare_Aggreg_power_auxiliary <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.2, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:k) {
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + betaZ * Z + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
tibble(proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
Compare_Aggreg_type1_error_auxiliary <- function(sample = 500, G_using, POS_using, effective_gene, b0 = -1,bE = 0.1, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4, MAF){
result <- tibble()
samp_col <- sample(1:ncol(G_using), size = sample, replace = F)
Do_once <- function(G_using, MyPOS_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
if(is.null(effective_gene)) {y_lat <- b0 + bE*E + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
else{y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
case_new <- ifelse(y_lat > 0, 1, 0)
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:length(samp_col)) {
Gi <- G_using[,samp_col[i]]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
p_vals_P2[i] <- 1
p_vals_P3[i] <- 1
p_vals_P0[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
}
result_P_INT <- dplyr::tibble(BP = POS_using[samp_col], proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle_p = p_vals_P2, oracle_error = p_vals_P3, MAF = MAF[samp_col])
}
Do_once(G_using, POS_using, effective_gene, bG, bint1, sigmaE)
}
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF)
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF, sigma_eps = 0.5, betaZ = 0.1)
### Function
Compare_Aggreg_power_auxiliary <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.2, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:k) {
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + betaZ * Z + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
tibble(proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
Compare_Aggreg_type1_error_auxiliary <- function(sample = 500, G_using, POS_using, effective_gene, b0 = -1,bE = 0.1, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4, MAF){
result <- tibble()
samp_col <- sample(1:ncol(G_using), size = sample, replace = F)
Do_once <- function(G_using, MyPOS_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
if(is.null(effective_gene)) {y_lat <- b0 + bE*E + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
else{y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
case_new <- ifelse(y_lat > 0, 1, 0)
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:length(samp_col)) {
Gi <- G_using[,samp_col[i]]
if(length(unique(Gi)) != 3){
p_vals_P1[i] <- 1
p_vals_P2[i] <- 1
p_vals_P3[i] <- 1
p_vals_P0[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
}
result_P_INT <- dplyr::tibble(BP = POS_using[samp_col], proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle_p = p_vals_P2, oracle_error = p_vals_P3, MAF = MAF[samp_col])
}
Do_once(G_using, POS_using, effective_gene, bG, bint1, sigmaE)
}
pval <- Compare_Aggreg_type1_error_auxiliary(G_using = G_using, POS_using = POS_using, sample = ncol(G_using), effective_gene = NULL, MAF = MAF, sigma_eps = 0.5, betaZ = 0.1)
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
### Randomly sample 1 genes:
p <- 1
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.4
bE <- 0.2
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
### Randomly sample 1 genes:
p <- 1
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.4
bE <- 0.2
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
#### Testing for interaction effect
### Assuming additive model: Testing for non-linearity
waldstats_P1 <- c()
p_vals_P1 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[3])
}
}
modi
any(is.na(modi$coefficients))
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
### Randomly sample 1 genes:
p <- 1
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.4
bE <- 0.2
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
#### Testing for interaction effect
### Assuming additive model: Testing for non-linearity
waldstats_P1 <- c()
p_vals_P1 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
if(any(is.na(modi$coefficients))){
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[3])
}
else{
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[3])
}
}
}
modi
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
### Randomly sample 1 genes:
p <- 1
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.4
bE <- 0.2
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
#### Testing for interaction effect
### Assuming additive model: Testing for non-linearity
waldstats_P1 <- c()
p_vals_P1 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
if(any(is.na(modi$coefficients))){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[3])
}
}
}
modi
as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2[1])
as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$chi2)
aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T)
)
dfdfdfd <- aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))
dfdfdfd$result
dfdfdfd$result$chi2
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
### Randomly sample 1 genes:
p <- 1
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.4
bE <- 0.2
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
#### Testing for interaction effect
### Assuming additive model: Testing for non-linearity
waldstats_P1 <- c()
p_vals_P1 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
if(any(is.na(modi$coefficients))){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
}
else{
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
}
}
}
result_P_INT <- tibble(SNP = obj.bigSNP$map$marker.ID[indx], CHR = CHR_using, BP = POS_using , stats = waldstats_P1, P = p_vals_P1)
result_P_INT
hist(result_P_INT$P)
hist(result_P_INT$P, breaks = 30)
qq(na.omit(result_P_INT)$P)
manhattan(result_P_INT, highlight = result_P_INT$SNP[which(POS_using %in% POS_EFF)], suggestiveline = FALSE, genomewideline = -log10(5 * (10 ^ -8)))
