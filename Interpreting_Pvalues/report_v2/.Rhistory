### Simulated the common Z and G
set.seed(100,sample.kind = "Rounding")
N <- 1000
G <- sample(c(0,1,2),size = N, replace = T, prob = c(0.49,0.42,0.09))
Z <- rnorm(N,sd = 3)
### Simulate each trait's disease status based on Z and G
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N,sd = 3)
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_A <- lm(yA~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_A$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_A <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_A
## B:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_B <- lm(yB~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_B$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_B <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_B
set.seed(100,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:800) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:800) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
set.seed(100,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:1200) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:1200) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
summary(mod)$coefficient
set.seed(100,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:2000) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:2000) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
set.seed(123,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:2000) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:2000) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
set.seed(12345,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:2000) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:2000) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
set.seed(100,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:2000) {
ylat_A <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_A_rep <- ifelse(ylat_A >=0, 1, 0)
mod <- glm(y_A_rep~Z+G, family = binomial(link = "logit"))
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:2000) {
ylat_B <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_B_rep <- ifelse(ylat_B >=0, 1, 0)
mod <- glm(y_B_rep~Z+G, family = binomial(link = "logit"))
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
### Comparison:
pcomp <- tibble(P = c(p1,p2), trait = c(rep("A",800),rep("B",800)))
### Comparison:
pcomp <- tibble(P = c(p1,p2), trait = c(rep("A",2000),rep("B",2000)))
pcomp %>% ggplot(aes(x = P, fill = trait)) + geom_histogram(bins = 20, alpha=0.5, position="identity")
library(stats)
library(tidyverse)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, dev = 'png', message = F, warning = F)
### Simulated the common Z and G
set.seed(100,sample.kind = "Rounding")
N <- 1000
G <- sample(c(0,1,2),size = N, replace = T, prob = c(0.49,0.42,0.09))
Z <- rnorm(N,sd = 3)
### Simulate each trait's disease status based on Z and G
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N,sd = 3)
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_A <- lm(yA~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_A$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_A <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_A
## B:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_B <- lm(yB~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_B$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_B <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_B
set.seed(12345,sample.kind = "Rounding")
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
p1 <- c()
for (i in 1:2000) {
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yA~Z+G)
p1[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p1 <= alpha)
emp_power
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
p2 <- c()
for (i in 1:2000) {
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
mod <- lm(yB~Z+G)
p2[i] <- summary(mod)$coefficient[3,4]
}
emp_power <- mean(p2 <= alpha)
emp_power
### Simulated the common Z and G
set.seed(100,sample.kind = "Rounding")
N <- 1000
G <- sample(c(0,1,2),size = N, replace = T, prob = c(0.49,0.42,0.09))
Z <- rnorm(N,sd = 3)
### Simulate each trait's disease status based on Z and G
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
ylat_A <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_A <- ifelse(ylat_A >=0, 1, 0)
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
ylat_B <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_B <- ifelse(ylat_B >=0, 1, 0)
### Case control counts across traits:
t <- rbind(table(y_A),table(y_B)) %>% as_tibble()
rownames(t) <- c("A","B")
kableExtra::kable(t, caption = "Case Control Counts across traits") %>%
kable_styling(latex_options = "HOLD_position", font_size = 10)
### Case control ratio across genotypes:
t <- cbind(c(y_A,y_B),c(G,G)) %>% as_tibble()
colnames(t) <- c("Y","G")
t <- t %>% group_by(G) %>% summarise(ratio = sum(Y)/n())
kableExtra::kable(t, caption = "Case Control Ratio across genotypes") %>%
kable_styling(latex_options = "HOLD_position", font_size = 10)
## A:
mod_A <- glm(y_A~Z + G, family = binomial(link = "logit"))
summary(mod_A)$coefficients
## B:
mod_B <- glm(y_B~ Z + G, family = binomial(link = "logit"))
summary(mod_B)$coefficients
## A:
mod_A <- glm(y_A~Z + G, family = binomial(link = "logit"))
kableExtra::kable(summary(mod_A)$coefficients, caption = "Fitted Model for Trait A") %>%
kable_styling(latex_options = "HOLD_position", font_size = 10)
## B:
mod_B <- glm(y_B~ Z + G, family = binomial(link = "logit"))
kableExtra::kable(summary(mod_A)$coefficients, caption = "Fitted Model for Trait B") %>%
kable_styling(latex_options = "HOLD_position", font_size = 10)
w
set.seed(100,sample.kind = "Rounding")
N <- 1000
G <- sample(c(0,1,2),size = N, replace = T, prob = c(0.49,0.42,0.09))
Z <- rnorm(N,sd = 3)
### Simulate each trait's disease status based on Z and G
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
ylat_A <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_A <- ifelse(ylat_A >=0, 1, 0)
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
ylat_B <- beta0 + betaG*G + betaZ*Z + rlogis(N)
y_B <- ifelse(ylat_B >=0, 1, 0)
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_A <- glm(y_A~Z + G, family = binomial(link = "logit"))
#### Get the design matrix:
X <- cbind(rep(1,N),mod_A$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
#beta <- as.numeric(mod_A$coefficients)
w <- c()
for (i in 1:N) {
si <- as.numeric(as.numeric(X[i,]) %*% beta)
w[i] <- dlogis(si)
}
w
hist(w)
mean(w)
var(w)
### Simulated the common Z and G
set.seed(100,sample.kind = "Rounding")
N <- 1000
G <- sample(c(0,1,2),size = N, replace = T, prob = c(0.49,0.42,0.09))
Z <- rnorm(N,sd = 3)
### Simulate each trait's disease status based on Z and G
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
yA <- beta0 + betaG*G + betaZ*Z + rnorm(N,sd = 3)
## B:
beta0 <- -0.5
betaZ <- 0.1
betaG <- 0.3
yB <- beta0 + betaG*G + betaZ*Z + rnorm(N, sd = 3)
## A:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_A <- lm(yA~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_A$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_A <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_A
## B:
beta0 <- -0.5
betaZ <- 0.8
betaG <- 0.3
### Theoretical Power
mod_B <- lm(yB~Z + G)
#### Get the design matrix:
X <- cbind(rep(1,N),mod_B$model[,-1])
### Compute the weight matrix W:
beta <- c(beta0,betaZ,betaG)
I <- (1/9)* as.matrix(t(X)) %*% as.matrix(X)
#### Invert to get the true covariance matrix
V <- solve(I)
### Compute the power function:
delta <- sqrt(1/V[3,3])*(0-beta[3])
alpha <- 0.05
Power_B <- 1- pnorm(delta - qnorm(alpha/2)) + pnorm(delta + qnorm(alpha/2))
Power_B
mod_A
summary(mod_A)
summary(mod_B)
var(G)
var(G)/var(yA)
var(G)/var(yB)
(0.3^2) * var(G)/var(yB)
(0.3^2) * var(G)/var(yA)
(((betaG^2) * var(G)) + ((betaZ^2)*var(Z)))/var(yA)
(((betaG^2) * var(G)) + ((betaZ^2)*var(Z)))/var(yB)
((betaZ^2)*var(Z))
((betaZ^2)*var(Z)))
((betaZ^2)*var(Z))
(((betaG^2) * var(G)) + ((0.1^2)*var(Z)))/var(yB)
(((betaG^2) * var(G)) + ((0.8^2)*var(Z)))/var(yA)
summary(mod_A)
summary(mod_B)
eta1 <- rnorm(1000, sd = 1)
eta2 <- rnorm(1000, sd = 10)
w1 <- dlogis(eta1)
w2 <- dlogis(eta2)
mean(w1)
mean(w2)
bar <- c()
bar[1] <- mean(w1)
bar[2] <- mean(w2)
bar[3] <- mean(w3)
bar[4] <- mean(w4)
bar[5] <- mean(w5)
bar[6] <- mean(w6)
bar[7] <- mean(w7)
bar[8] <- mean(w8)
bar[9] <- mean(w9)
bar[10] <- mean(w10)
bar[11] <- mean(w11)
bar[12] <- mean(w12)
eta1 <- rnorm(1000, sd = 1)
eta2 <- rnorm(1000, sd = 2)
eta3 <- rnorm(1000, sd = 3)
eta4 <- rnorm(1000, sd = 4)
eta5 <- rnorm(1000, sd = 5)
eta6 <- rnorm(1000, sd = 6)
eta7 <- rnorm(1000, sd = 7)
eta8 <- rnorm(1000, sd = 8)
eta9 <- rnorm(1000, sd = 9)
eta10 <- rnorm(1000, sd = 10)
eta11 <- rnorm(1000, sd = 11)
eta12 <- rnorm(1000, sd = 12)
w1 <- dlogis(eta1)
w2 <- dlogis(eta2)
w3 <- dlogis(eta3)
w4 <- dlogis(eta4)
w5 <- dlogis(eta5)
w6 <- dlogis(eta6)
w7 <- dlogis(eta7)
w8 <- dlogis(eta8)
w9 <- dlogis(eta9)
w10 <- dlogis(eta10)
w11 <- dlogis(eta11)
w12 <- dlogis(eta12)
bar <- c()
bar[1] <- mean(w1)
bar[2] <- mean(w2)
bar[3] <- mean(w3)
bar[4] <- mean(w4)
bar[5] <- mean(w5)
bar[6] <- mean(w6)
bar[7] <- mean(w7)
bar[8] <- mean(w8)
bar[9] <- mean(w9)
bar[10] <- mean(w10)
bar[11] <- mean(w11)
bar[12] <- mean(w12)
data <- data_frame(sd = 1:12, bar = bar)
data
plot(data, bar~sd)
plot(data, bar~sd^2)
plot(data, bar~I(sd^2))
data$var <- data$sd^2
plot(data, bar~var)
plot(bar~var, data = data)
plot(bar~sd, data = data)
lm(bar~I(log(sd)), data = data)
plot(lm(bar~I(log(sd)), data = data))
plot(lm(bar~I(1/(sd)), data = data))
plot(bar~1/sd, data = data)
plot(bar~I(1/sd), data = data)
plot(bar~I(1/var), data = data)
plot(bar~I(1/sd), data = data)
