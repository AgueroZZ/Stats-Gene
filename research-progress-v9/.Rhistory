knitr::opts_chunk$set(echo = TRUE, dev = 'png', message = F, warning = F)
library(tidyverse)
library(lme4)
library(bigsnpr)
library(bigstatsr)
library(dplyr)
library(nlme)
library(aod)
library(qqman)
library(foreach)
library(doParallel)
### Read in data:
path <- "D:/gwas-practice/indep_QC.bed"
tmpfile  <- tempfile()
snp_readBed(path, backingfile = tmpfile)
obj.bigSNP <- snp_attach(paste0(tmpfile , ".rds"))
G   <- obj.bigSNP$genotypes
CHR <- obj.bigSNP$map$chromosome
POS <- obj.bigSNP$map$physical.pos
# Check some counts for the 10 first SNPs
big_counts(G, ind.col = 1:10)
### Again, first take account of the linkage disequilibrium problem:
set.seed(123)
ind.excl <- snp_indLRLDR(infos.chr = CHR,infos.pos = POS)
indx <- snp_clumping(G,infos.chr = CHR, infos.pos = POS, thr.r2 = 0.01, exclude = ind.excl)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
Compare_Aggreg_type1_error <- function(SNP_names, G_using, POS_using, CHR_using, effective_gene, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0.5, sigmaE = 5,sigma_eps = 1, measure_error_percentage = 1/4){
result <- tibble()
Do_once <- function(MySNP_names, G_using, MyPOS_using, MyCHR_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + rnorm(n = length(G_using[,1]), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
waldstats_P1 <- c()
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3 | i == which(POS_using == effective_gene)){
waldstats_P1[i] <- 0
p_vals_P1[i] <- 1
p_vals_P2[i] <- 1
p_vals_P3[i] <- 1
}
else{
modi <- glm(case_new ~ factor(Gi), family = binomial(link = "probit"))
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[4,4]
oracle_error <- glm(case_new ~ Gi*E2, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[4,4]
}
}
result_P_INT <- dplyr::tibble(SNP = SNP_names, CHR = CHR_using, BP = POS_using , stats = waldstats_P1, P = p_vals_P1, oracle_p = p_vals_P2, oracle_error = p_vals_P3)
}
Do_once(SNP_names, G_using, POS_using, CHR_using, effective_gene, bG, bint1, sigmaE)
}
Compare_Aggreg_power <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0.5, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
for (i in 1:k) {
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
waldstats_P1 <- c()
modi <- glm(case_new ~ factor(Gi), family = binomial(link = "probit"))
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[4,4]
oracle_error <- glm(case_new ~ Gi*E2, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[4,4]
}
tibble(proposed = p_vals_P1, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
set.seed(123)
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.05 & MAF<=0.1
POS_EFF1 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.1 & MAF<=0.15
POS_EFF2 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.15 & MAF<=0.2
POS_EFF3 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.2 & MAF<=0.3
POS_EFF4 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.3 & MAF<=0.4
POS_EFF5 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.4
POS_EFF6 <- sample(POS_using[Qualified], size = 1)
### show their corresponding MAF:
sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3, POS_EFF4, POS_EFF5, POS_EFF6)])
### Compute power of each case:
suppressWarnings(power1 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5))
power1 <- power1 <= 5 * (10 ^ -8)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
suppressWarnings(power2 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, sigma_eps = 0.5))
power2 <- power2 <= 5 * (10 ^ -8)
power2 <- apply(power2, MARGIN = 2, FUN = mean)
suppressWarnings(power3 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5))
power3 <- power3 <= 5 * (10 ^ -8)
power3 <- apply(power3, MARGIN = 2, FUN = mean)
suppressWarnings(power4 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, sigma_eps = 0.5))
power4 <- power4 <= 5 * (10 ^ -8)
power4 <- apply(power4, MARGIN = 2, FUN = mean)
suppressWarnings(power5 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, sigma_eps = 0.5))
power5 <- power5 <= 5 * (10 ^ -8)
power5 <- apply(power5, MARGIN = 2, FUN = mean)
suppressWarnings(power6 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5))
power6 <- power6 <= 5 * (10 ^ -8)
power6 <- apply(power6, MARGIN = 2, FUN = mean)
## Table:
power <- as_tibble(as.matrix(rbind(power1,power2,power3, power4,power5,power6))) %>% mutate(MAF = sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)]))
kableExtra::kable(power,caption = "Comparison of Power")
## Figure:
power %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Power") %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
hist(power6)
suppressWarnings(power1 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5))
hist(power1)
power1
hist(power1$proposed)
hist(power1$oracle)
hist(power1$oracle_error)
hist(power1$proposed, break = 30)
hist(power1$proposed, breaks  = 30)
hist(power1$oracle, breaks  = 30)
hist(power1$oracle_error, breaks  = 30)
power1 <- power1 <= 5 * (10 ^ -2)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
power1
suppressWarnings(power1 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, bE = 0))
power1
power1
suppressWarnings(power1 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, bint1 = 0))
power1
hist(power1$proposed)
hist(power1$oracle)
hist(power1$oracle_error)
suppressWarnings(power1 <- Compare_Aggreg_power(k = 500, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, bint1 = 0))
hist(power1$oracle_error)
hist(power1$oracle)
hist(power1$proposed)
power1 <- Compare_Aggreg_power(k = 1000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, bint1 = 0)
power1
power1
hist(power1$proposed)
hist(power1$oracle)
hist(power1$oracle_error)
hist(power1$proposed, breaks =  30)
hist(power1$oracle, breaks =  30)
hist(power1$oracle_error, breaks =  30)
power1 <- Compare_Aggreg_power(k = 1000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 1)
hist(power$proposed)
hist(power$proposed, break = 30)
hist(power$proposed, breaks = 30)
power
power1 <- Compare_Aggreg_power(k = 1000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 1, bint1 = 0)
power1
hist(power1$proposed)
hist(power1$proposed,breaks = 20)
library(dgof)
install.packages("dgof")
library(dgof)
ks.test(power1$proposed, "punif",0,1)
ks.test(power1$oracle, "punif",0,1)
ks.test(power1$oracle_error, "punif",0,1)
Compare_Aggreg_power
power1 <- Compare_Aggreg_power(k = 1000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 1, bint1 = 0)
power$proposed
power1
power1
power1$proposed
hist(power1$proposed)
hist(power1$proposed,breaks = 30)
hist(power1$oracle,breaks = 30)
hist(power1$oracle_error,breaks = 30)
ks.test(power1$proposed, "punif",0,1)
ks.test(power1$oracle, "punif",0,1)
ks.test(power1$oracle_error, "punif",0,1)
power1 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5, bint1 = 0)
hist(power1$proposed)
hist(power1$proposed,breaks = 30)
hist(power1$proposed,breaks = 50)
hist(power1$proposed,breaks = 10)
ks.test(power1$proposed, "punif",0,1)
ks.test(power1$oracle, "punif",0,1)
ks.test(power1$oracle_error, "punif",0,1)
