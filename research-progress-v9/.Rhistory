E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -8))
mean(p_vals_withE <= 5 * (10 ^ -8))
mean(p_vals_withE_error <= 5 * (10 ^ -8))
### Randomly Sample p genes
set.seed(123,sample.kind="Rounding")
p <- 5
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G)
MAF <- snp_MAF(G)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
indx <- which(POS %in% sample(POS[Qualified], size = p))
G_use <- G[,indx]
POS_use <- POS[indx]
CHR_use <- CHR[indx]
### Do the bootstrapping:
bootsize <- 20000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 100
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -8))
mean(p_vals_withE <= 5 * (10 ^ -8))
mean(p_vals_withE_error <= 5 * (10 ^ -8))
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 0.5
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 100
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -8))
mean(p_vals_withE <= 5 * (10 ^ -8))
mean(p_vals_withE_error <= 5 * (10 ^ -8))
### Do the bootstrapping:
bootsize <- 80000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 100
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -8))
mean(p_vals_withE <= 5 * (10 ^ -8))
mean(p_vals_withE_error <= 5 * (10 ^ -8))
bootsize <- 3000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 100
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
bootsize <- 3000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 1000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
### Do the bootstrapping:
bootsize <- 3000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0
gam2 <- -0.3
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
set.seed(123,sample.kind="Rounding")
p <- 5
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G)
MAF <- snp_MAF(G)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
indx <- which(POS %in% sample(POS[Qualified], size = p))
G_use <- G[,indx]
POS_use <- POS[indx]
CHR_use <- CHR[indx]
### Do the bootstrapping:
bootsize <- 5000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Power:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
bootsize <- 5000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter
b0 <- -1
bG <- 0.3
gam1 <- 0
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G_boot[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_boot[,1]), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G_boot[,1] + bE*E + gam1*E*ifelse(G_boot[,1] == 1, 1,0) + gam2*E*ifelse(G_boot[,1] == 2, 1,0) + rnorm(n = length(G_boot[,1]), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G_boot[,1]), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G_boot[,1]*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G_boot[,1]*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
### Type I error:
mean(p_vals_Prop <= 5 * (10 ^ -2))
mean(p_vals_withE <= 5 * (10 ^ -2))
mean(p_vals_withE_error <= 5 * (10 ^ -2))
hist(p_vals_Prop, breaks = 10)
hist(p_vals_Prop, breaks = 20)
hist(p_vals_withE, breaks = 20)
hist(p_vals_withE_error, breaks = 20)
hist(p_vals_Prop, breaks = 20)
hist(p_vals_withE, breaks = 20)
hist(p_vals_withE_error, breaks = 20)
a <- c(1,2,3,4)
a[,1]
Interaction_Test <- function(G, b0, bG, gam1, gam2, bE, sig, sigmaE, K, measure_error_percentage = 1/4){
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
K <- 10000
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G), sd = sigmaE)
E2 <- E + rnorm(n = length(G), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G + bE*E + gam1*E*ifelse(G == 1, 1,0) + gam2*E*ifelse(G == 2, 1,0) + rnorm(n = length(G), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
tibble(proposed = p_vals_Prop, withE = p_vals_withE, withError = p_vals_withE_error)
}
Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K, measure_error_percentage = 1/4)
power <- Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K = 10, measure_error_percentage = 1/4)
Interaction_Test <- function(G, b0, bG, gam1, gam2, bE, sig, sigmaE, K, measure_error_percentage = 1/4){
p_vals_Prop <- c()
p_vals_withE <- c()
p_vals_withE_error <- c()
### repetition for K times:
for (i in 1:K) {
### Generate the underlying environment variable:
E <- rnorm(n = length(G), sd = sigmaE)
E2 <- E + rnorm(n = length(G), sd = sigmaE * sqrt(measure_error_percentage))
### Generate the latent variable, assume the first gene is causal
y_lat <- b0 + bG*G + bE*E + gam1*E*ifelse(G == 1, 1,0) + gam2*E*ifelse(G == 2, 1,0) + rnorm(n = length(G), sd = sig)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(G), family = binomial(link = "probit"))
oracle <- glm(case_new ~ G*E, family = binomial(link = "probit"))
oracle_error <- glm(case_new ~ G*E2, family = binomial(link = "probit"))
p_vals_withE_error[i] <- summary(oracle_error)$coefficient[4,4]
p_vals_Prop[i] <- as.numeric(wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_withE[i] <- summary(oracle)$coefficient[4,4]
}
tibble(proposed = p_vals_Prop, withE = p_vals_withE, withError = p_vals_withE_error)
}
power <- Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K = 10, measure_error_percentage = 1/4)
power
### Read in data:
path <- "D:/gwas-practice/indep_QC.bed"
tmpfile  <- tempfile()
snp_readBed(path, backingfile = tmpfile)
obj.bigSNP <- snp_attach(paste0(tmpfile , ".rds"))
G   <- obj.bigSNP$genotypes
CHR <- obj.bigSNP$map$chromosome
POS <- obj.bigSNP$map$physical.pos
### Randomly Sample p genes
set.seed(123,sample.kind="Rounding")
p <- 5
### Need to make sure that all genotypes have enough frequencies in the selected genes:
freq_counts <- big_counts(G)
MAF <- snp_MAF(G)
Qualified <- freq_counts[3,] >= 200 & MAF>=0.3
indx <- which(POS %in% sample(POS[Qualified], size = p))
G_use <- G[,indx]
POS_use <- POS[indx]
CHR_use <- CHR[indx]
### Do the bootstrapping:
bootsize <- 5000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter, Compute power:
b0 <- -1
bG <- 0.3
gam1 <- 0.3
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
power <- Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K = 1000, measure_error_percentage = 1/4)
power
power %>% summarise(mean())
power<=0.05 %>% apply(, 2, mean)
power<=0.05 %>% apply(., 2, mean)
power<=0.05
as.matrix(power)
as.matrix(power)[1,]
as.matrix(power)[1,][1]
as.matrix(power)[1,][2]
as.matrix(power)<=0.05 %>% apply(., 2, mean)
apply(as.matrix(power)<=0.05, 2, mean)
power
power %>% pivot_longer(proposed:withError, value_to = "P", name_to = "type")
power %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type")
power %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 20) + facet_grid(~type)
bootsize <- 5000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter, compute Type I error rate
b0 <- -1
bG <- 0.3
gam1 <- 0
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
error <- Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K = 1000, measure_error_percentage = 1/4)
apply(as.matrix(error)<=0.05, 2, mean)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 20) + facet_grid(~type)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 20) + facet_grid(~type) + xlim(0,1)
hist(error$proposed)
set.seed(123,sample.kind="Rounding")
bootsize <- 5000
G_boot <- G_use[sample(1:nrow(G_use), bootsize, replace=TRUE), ]
### Specify a set of parameter, compute Type I error rate
b0 <- -1
bG <- 0.3
gam1 <- 0
gam2 <- 0
bE <- 0.3
sig <- 1
sigmaE <- 1
measure_error_percentage <- 1/4
error <- Interaction_Test(G = G_boot[,1], b0, bG, gam1, gam2, bE, sig, sigmaE, K = 10000, measure_error_percentage = 1/4)
apply(as.matrix(error)<=0.05, 2, mean)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 20) + facet_grid(~type) + xlim(0,1)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 20) + facet_grid(~type) + xlim(0,1)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 10) + facet_grid(~type) + xlim(0,1)
error %>% pivot_longer(proposed:withError, values_to = "P", names_to = "type") %>% ggplot(aes(P)) + geom_histogram(bins = 30) + facet_grid(~type) + xlim(0,1)
