MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 50 & MAF>=0.3
POS_EFF <- sample(POS_using[Qualified], size = 1)
Qualified_2 <- freq_counts[3,] >= 50
G_using <- G[,Qualified_2]
CHR_using <- CHR[Qualified_2]
POS_using <- POS[Qualified_2]
### Randomly sample 1/2 genes with strong effects and 1/2 genes with weak effects
b0 <- -1
bG <- 0.8
bint <- 0.8
bE <- 0.1
bZ <- 0.3
### Generate the underlying environment variable:
E <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the auxiliary variable:
Z <- rnorm(n = length(G_using[,1]), sd = 1)
### Generate the latent variable:
y_lat <- b0 + bG*G_using[,POS_using == POS_EFF] + bE*E + bZ*Z + bint*E*G_using[,POS_using == POS_EFF] + rnorm(n = length(G_using[,1]), sd = 0.5)
case_new <- ifelse(y_lat > 0, 1, 0)
### case_control ratio:
table(case_new)
#### Testing for interaction effect
### Assuming additive model: Testing for non-linearity
waldstats_P1 <- c()
p_vals_P1 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3){
waldstats_P1[i] <- 0
p_vals_P1[i] <- -1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
if(any(is.na(modi$coefficients))){
waldstats_P1[i] <- 0
p_vals_P1[i] <- -1
}
else{
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
}
}
}
result_P_INT <- tibble(SNP = obj.bigSNP$map$marker.ID[Qualified_2], CHR = CHR_using, BP = POS_using , stats = waldstats_P1, P = p_vals_P1)
manhattan(result_P_INT, highlight = result_P_INT$SNP[which(POS_using %in% POS_EFF)], suggestiveline = FALSE, genomewideline = -log10(5 * (10 ^ -8)))
qq(na.omit(result_P_INT)$P)
hist(result_P_INT$P, breaks = 30)
knitr::opts_chunk$set(echo = TRUE, dev = 'png', message = F, warning = F)
library(tidyverse)
library(lme4)
library(bigsnpr)
library(bigstatsr)
library(dplyr)
library(nlme)
library(aod)
library(qqman)
library(foreach)
library(doParallel)
### Read in data:
path <- "D:/gwas-practice/indep_QC.bed"
tmpfile  <- tempfile()
snp_readBed(path, backingfile = tmpfile)
obj.bigSNP <- snp_attach(paste0(tmpfile , ".rds"))
G   <- obj.bigSNP$genotypes
CHR <- obj.bigSNP$map$chromosome
POS <- obj.bigSNP$map$physical.pos
# Check some counts for the 10 first SNPs
big_counts(G, ind.col = 1:10)
Compare_Aggreg_type1_error <- function(SNP_names, G_using, POS_using, CHR_using, effective_gene, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0.5, sigmaE = 5,sigma_eps = 1, measure_error_percentage = 1/4){
result <- tibble()
Do_once <- function(MySNP_names, G_using, MyPOS_using, MyCHR_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + rnorm(n = length(G_using[,1]), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
waldstats_P1 <- c()
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
for (i in 1:ncol(G_using)) {
Gi <- G_using[,i]
if(length(unique(Gi)) != 3 | i == which(POS_using == effective_gene)){
waldstats_P1[i] <- 0
p_vals_P1[i] <- -1
p_vals_P2[i] <- -1
p_vals_P3[i] <- -1
}
else{
modi <- glm(case_new ~ factor(Gi), family = binomial(link = "probit"))
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[4,4]
oracle_error <- glm(case_new ~ Gi*E2, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[4,4]
}
}
result_P_INT <- dplyr::tibble(SNP = SNP_names, CHR = CHR_using, BP = POS_using , stats = waldstats_P1, P = p_vals_P1, oracle_p = p_vals_P2, oracle_error = p_vals_P3)
}
Do_once(SNP_names, G_using, POS_using, CHR_using, effective_gene, bG, bint1, sigmaE)
}
Compare_Aggreg_power <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0.5, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
for (i in 1:k) {
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
waldstats_P1 <- c()
modi <- glm(case_new ~ factor(Gi), family = binomial(link = "probit"))
waldstats_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[1])
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[-1,-1], b = modi$coefficients[-1], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[4,4]
oracle_error <- glm(case_new ~ Gi*E2, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[4,4]
}
tibble(proposed = p_vals_P1, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
set.seed(123,sample.kind="Rounding")
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
### Again, first take account of the linkage disequilibrium problem:
set.seed(123,sample.kind="Rounding")
indx <- 1:ncol(G)
G_using <- G[,indx]
CHR_using <- CHR[indx]
POS_using <- POS[indx]
set.seed(123,sample.kind="Rounding")
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.05 & MAF<=0.1
POS_EFF1 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.1 & MAF<=0.15
POS_EFF2 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.15 & MAF<=0.2
POS_EFF3 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.2 & MAF<=0.3
POS_EFF4 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.3 & MAF<=0.4
POS_EFF5 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.4
POS_EFF6 <- sample(POS_using[Qualified], size = 1)
### show their corresponding MAF:
sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3, POS_EFF4, POS_EFF5, POS_EFF6)])
### Compute power of each case:
suppressWarnings(power1 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5))
power1 <- power1 <= 5 * (10 ^ -8)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
suppressWarnings(power2 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, sigma_eps = 0.5))
power2 <- power2 <= 5 * (10 ^ -8)
power2 <- apply(power2, MARGIN = 2, FUN = mean)
suppressWarnings(power3 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5))
power3 <- power3 <= 5 * (10 ^ -8)
power3 <- apply(power3, MARGIN = 2, FUN = mean)
suppressWarnings(power4 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, sigma_eps = 0.5))
power4 <- power4 <= 5 * (10 ^ -8)
power4 <- apply(power4, MARGIN = 2, FUN = mean)
suppressWarnings(power5 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, sigma_eps = 0.5))
power5 <- power5 <= 5 * (10 ^ -8)
power5 <- apply(power5, MARGIN = 2, FUN = mean)
suppressWarnings(power6 <- Compare_Aggreg_power(k = 100, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5))
power6 <- power6 <= 5 * (10 ^ -8)
power6 <- apply(power6, MARGIN = 2, FUN = mean)
## Table:
power <- as_tibble(as.matrix(rbind(power1,power2,power3, power4,power5,power6))) %>% mutate(MAF = sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)]))
kableExtra::kable(power,caption = "Comparison of Power")
## Figure:
power %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Power") %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
power %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Power")
a <- power %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Power")
a
a$Type
factor(a$Type)
levels(factor(a$Type))
levels(factor(a$Type)) <- c("with_E","with_E_error", "without_E")
levels(factor(a$Type)) <- c("with_E","with_E_error", "without_E")
a$Type = factor(a$Type)
levels(a$Type)
levels(a$Type) <- c("with_E","with_E_error", "without_E")
a
power_plot <- power %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
levels(power_plot$Type)
levels(power_plot$Type) <- c("with_E","with_E_error", "without_E")
power_plot %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
set.seed(123,sample.kind="Rounding")
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.05 & MAF<=0.1
POS_EFF1 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.1 & MAF<=0.15
POS_EFF2 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.15 & MAF<=0.2
POS_EFF3 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.2 & MAF<=0.25
POS_EFF4 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.25 & MAF<=0.3
POS_EFF5 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.3
POS_EFF6 <- sample(POS_using[Qualified], size = 1)
### show their corresponding MAF:
sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)])
### Compute type I error rate of each case:
#1:
error1 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r1 <- error1 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
#2:
error2 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r2 <- error2 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
#3:
error3 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r3 <- error3 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
#4:
error4 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r4 <- error4 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
#5:
error5 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r5 <- error5 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
#6:
error6 <- Compare_Aggreg_power(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, b0 = -1,bE = 0.3, bG = 0.8, bint1 = 0, sigmaE = 1,sigma_eps = 1, measure_error_percentage = 1/4)
r6 <- error6 %>% summarise(proposed = mean(proposed <=0.05), oracle = mean(oracle <= 0.05), oracle_error = mean(oracle_error<= 0.05))
r <- as_tibble(rbind(r1,r2,r3,r4,r5,r6))
r$MAF <- sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)])
r %>% rename(c("proposed" = "proposed","oracle" = "oracle")) %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(MAF,Error,color = Type)) + geom_line() + ylab("Type I Error") + geom_hline(aes(yintercept = 0.05))
r
r %>% rename(c("proposed" = "proposed","oracle" = "oracle")) %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error")
r_plot <- r %>% rename(c("proposed" = "proposed","oracle" = "oracle")) %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error")
r_plot
r_plot$Type
r_plot <- r %>% rename(c("proposed" = "proposed","oracle" = "oracle")) %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
r_plot
r_plot$Type
levels(r_plot$Type)
r <- as_tibble(rbind(r1,r2,r3,r4,r5,r6))
r$MAF <- sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)])
r_plot <- r %>% rename(c("proposed" = "proposed","oracle" = "oracle")) %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(r_plot$Type) <- c("with_E","with_E_error", "without_E")
r_plot %>% ggplot(aes(MAF,Error,color = Type)) + geom_line() + ylab("Type I Error") + geom_hline(aes(yintercept = 0.05))
all_error <- r
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed = mean(proposed), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E")
all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error <- r
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed = mean(proposed), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E")
all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error <- r
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed = mean(proposed), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type)
### Function
Compare_Aggreg_power_auxiliary <- function(k = 50, G_using, POS_using, effective_gene, b0 = -1,bE = 0.2, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4){
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:k) {
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
Gi <- G_using[,POS_using == effective_gene]
y_lat <- b0 + bE*E + bG*Gi + bint1*E*Gi + betaZ * Z + rnorm(n = length(Gi), sd = sigma_eps)
case_new <- ifelse(y_lat > 0, 1, 0)
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
tibble(proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle = p_vals_P2, oracle_error = p_vals_P3)
}
Compare_Aggreg_type1_error_auxiliary <- function(sample = 500, G_using, POS_using, effective_gene, b0 = -1,bE = 0.1, bG = 0.8, bint1 = 0.4, betaZ = 0.8, sigmaE = 1, sigma_eps = 1, measure_error_percentage = 1/4, MAF){
result <- tibble()
samp_col <- sample(1:ncol(G_using), size = sample, replace = F)
Do_once <- function(G_using, MyPOS_using, Myeffective_gene, MybG = 0.3, Mybint1 = 0.6, MysigmaE = 5){
Z <- rnorm(n = length(G_using[,1]), mean = 0, sd = 1)
E <- rnorm(n = length(G_using[,1]), sd = sigmaE)
E2 <- E + rnorm(n = length(G_using[,1]), sd = sigmaE * sqrt(measure_error_percentage))
if(is.null(effective_gene)) {y_lat <- b0 + bE*E + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
else{y_lat <- b0 + bE*E + bG*G_using[,POS_using == effective_gene] + bint1*E*G_using[,POS_using == effective_gene] + betaZ*Z + rnorm(n = length(G_using[,1]), sd = sigma_eps)}
case_new <- ifelse(y_lat > 0, 1, 0)
p_vals_P1 <- c()
p_vals_P2 <- c()
p_vals_P3 <- c()
p_vals_P0 <- c()
for (i in 1:length(samp_col)) {
Gi <- G_using[,samp_col[i]]
if(length(unique(Gi)) != 3){
p_vals_P1[i] <- -1
p_vals_P2[i] <- -1
p_vals_P3[i] <- -1
p_vals_P0[i] <- -1
}
else{
modi <- glm(case_new ~ factor(Gi)*Z, family = binomial(link = "probit"))
p_vals_P1[i] <- as.numeric(aod::wald.test(vcov(modi)[c(2,3),c(2,3)], b = modi$coefficients[c(2,3)], H0 = matrix(0,nrow = 1,ncol = 1), L = matrix(c(2,-1),nrow = 1))$result$chi2[3])
p_vals_P0[i] <- as.numeric(aod::wald.test(vcov(modi)[-c(1,4),-c(1,4)], b = modi$coefficients[-c(1,4)], H0 = matrix(0,nrow = 3,ncol = 1), L = matrix(c(2,-1,0,0,0,0,1,0,0,0,0,1),nrow = 3, byrow = T))$result$chi2[3])
oracle <- glm(case_new ~ Gi*E + Z, family = binomial(link = "probit"))
p_vals_P2[i] <- summary(oracle)$coefficient[5,4]
oracle_error <- glm(case_new ~ Gi*E2 + Z, family = binomial(link = "probit"))
p_vals_P3[i] <- summary(oracle_error)$coefficient[5,4]
}
}
result_P_INT <- dplyr::tibble(BP = POS_using[samp_col], proposed_1 = p_vals_P1, proposed_2 = p_vals_P0, oracle_p = p_vals_P2, oracle_error = p_vals_P3, MAF = MAF[samp_col])
}
Do_once(G_using, POS_using, effective_gene, bG, bint1, sigmaE)
}
set.seed(123,sample.kind="Rounding")
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.05 & MAF<=0.1
POS_EFF1 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 50 & MAF>=0.1 & MAF<=0.15
POS_EFF2 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.15 & MAF<=0.2
POS_EFF3 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.2 & MAF<=0.3
POS_EFF4 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.3 & MAF<=0.4
POS_EFF5 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.4
POS_EFF6 <- sample(POS_using[Qualified], size = 1)
### Computation:
### Compute power of each case:
suppressWarnings(power1 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, sigmaE = 1))
power1 <- power1 <= 5 * (10 ^ -8)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
suppressWarnings(power2 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, sigma_eps = 0.5, sigmaE = 1))
power2 <- power2 <= 5 * (10 ^ -8)
power2 <- apply(power2, MARGIN = 2, FUN = mean)
suppressWarnings(power3 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5, sigmaE = 1))
power3 <- power3 <= 5 * (10 ^ -8)
power3 <- apply(power3, MARGIN = 2, FUN = mean)
suppressWarnings(power4 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, sigma_eps = 0.5, sigmaE = 1))
power4 <- power4 <= 5 * (10 ^ -8)
power4 <- apply(power4, MARGIN = 2, FUN = mean)
suppressWarnings(power5 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, sigma_eps = 0.5, sigmaE = 1))
power5 <- power5 <= 5 * (10 ^ -8)
power5 <- apply(power5, MARGIN = 2, FUN = mean)
suppressWarnings(power6 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5, sigmaE = 1))
power6 <- power6 <= 5 * (10 ^ -8)
power6 <- apply(power6, MARGIN = 2, FUN = mean)
## Table:
power <- as_tibble(as.matrix(rbind(power1,power2,power3, power4,power5,power6))) %>% mutate(MAF = sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)]))
kableExtra::kable(power,caption = "Comparison of Power")
## Figure:
power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
power_plot <- power power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
power_plot <- power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
power_plot
levels(power_plot$Type)
power_plot <- power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
levels(power_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
power_plot %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
set.seed(123,sample.kind="Rounding")
### Computation:
### Compute power of each case:
suppressWarnings(power1 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power1 <- power1 <= 5 * (10 ^ -8)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
suppressWarnings(power2 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power2 <- power2 <= 5 * (10 ^ -8)
power2 <- apply(power2, MARGIN = 2, FUN = mean)
suppressWarnings(power3 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power3 <- power3 <= 5 * (10 ^ -8)
power3 <- apply(power3, MARGIN = 2, FUN = mean)
suppressWarnings(power4 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power4 <- power4 <= 5 * (10 ^ -8)
power4 <- apply(power4, MARGIN = 2, FUN = mean)
suppressWarnings(power5 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power5 <- power5 <= 5 * (10 ^ -8)
power5 <- apply(power5, MARGIN = 2, FUN = mean)
suppressWarnings(power6 <- Compare_Aggreg_power_auxiliary(k = 200, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5, sigmaE = 1, bint1 = 0.8))
power6 <- power6 <= 5 * (10 ^ -8)
power6 <- apply(power6, MARGIN = 2, FUN = mean)
## Table:
power <- as_tibble(as.matrix(rbind(power1,power2,power3, power4,power5,power6))) %>% mutate(MAF = sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)]))
kableExtra::kable(power,caption = "Comparison of Power")
## Figure:
power_plot <- power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
levels(power_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
power_plot %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
set.seed(123,sample.kind="Rounding")
### Sample three casual genes, corresponding to different MAF
### Sample three casual genes, corresponding to different MAF
freq_counts <- big_counts(G,ind.col = indx)
MAF <- snp_MAF(G,ind.col = indx)
Qualified <- freq_counts[3,] >= 30 & MAF>=0.05 & MAF<=0.1
POS_EFF1 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 50 & MAF>=0.1 & MAF<=0.15
POS_EFF2 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.15 & MAF<=0.2
POS_EFF3 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 80 & MAF>=0.2 & MAF<=0.25
POS_EFF4 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.25 & MAF<=0.3
POS_EFF5 <- sample(POS_using[Qualified], size = 1)
Qualified <- freq_counts[3,] >= 100 & MAF>=0.3
POS_EFF6 <- sample(POS_using[Qualified], size = 1)
### show their corresponding MAF:
sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3)])
suppressWarnings(power1 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF1, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power1 <- power1 <= 5 * (10 ^ -2)
power1 <- apply(power1, MARGIN = 2, FUN = mean)
suppressWarnings(power2 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF2, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power2 <- power2 <= 5 * (10 ^ -2)
power2 <- apply(power2, MARGIN = 2, FUN = mean)
suppressWarnings(power3 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power3 <- power3 <= 5 * (10 ^ -2)
power3 <- apply(power3, MARGIN = 2, FUN = mean)
suppressWarnings(power4 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF4, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power4 <- power4 <= 5 * (10 ^ -2)
power4 <- apply(power4, MARGIN = 2, FUN = mean)
suppressWarnings(power5 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF5, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power5 <- power5 <= 5 * (10 ^ -2)
power5 <- apply(power5, MARGIN = 2, FUN = mean)
suppressWarnings(power6 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF6, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power6 <- power6 <= 5 * (10 ^ -2)
power6 <- apply(power6, MARGIN = 2, FUN = mean)
## Table:
power <- as_tibble(as.matrix(rbind(power1,power2,power3, power4,power5,power6))) %>% mutate(MAF = sort(MAF[POS_using %in% c(POS_EFF1,POS_EFF2,POS_EFF3,POS_EFF4,POS_EFF5,POS_EFF6)]))
power_plot <- power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
levels(power_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
power_plot %>% ggplot(aes(MAF,Power,color = Type)) + geom_line()
power_plot <- power %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Power") %>% mutate(Type = factor(Type))
levels(power_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
power_plot %>% ggplot(aes(MAF,Power,color = Type)) + geom_line() + ylab("Error Rate")
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
all_error_plot %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type)
all_error <- power
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed_1 = mean(proposed_1),proposed_2 = mean(proposed_2), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3, alpha = 1) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
all_error_plot <- all_error %>% pivot_longer(proposed_1:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E_1df", "without_E_3df")
all_error_plot %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
error3$MAF_level <- ifelse(error3$MAF >= 0.1, "0.1-0.2","0.05-0.1")
power3$MAF_level <- ifelse(power3$MAF >= 0.1, "0.1-0.2","0.05-0.1")
power3
power3
suppressWarnings(power3 <- Compare_Aggreg_power_auxiliary(k = 2000, G_using = G_using, POS_using = POS_using, effective_gene = POS_EFF3, sigma_eps = 0.5, sigmaE = 1, bint1 = 0))
power3$MAF_level <- ifelse(power3$MAF >= 0.1, "0.1-0.2","0.05-0.1")
all_error <- r
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed = mean(proposed), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E")
all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
all_error <- r
all_error$MAF_level <- ifelse(all_error$MAF >= 0.1, "0.1-0.15","0.05-0.1")
all_error$MAF_level <- ifelse(all_error$MAF >= 0.15, "0.15-0.2", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.2, "0.2-0.25", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.25, "0.25-0.3", all_error$MAF_level)
all_error$MAF_level <- ifelse(all_error$MAF >= 0.3, "0.3-0.5", all_error$MAF_level)
all_error <- all_error %>% group_by(MAF_level) %>% summarise(proposed = mean(proposed), oracle = mean(oracle), oracle_error = mean(oracle_error), number = 2000*n())
all_error <- all_error %>% mutate(upper = 0.05 + 3*sqrt(0.05*0.95/number), lower = 0.05 - 3*sqrt(0.05*0.95/number))
all_error_plot <- all_error %>% pivot_longer(proposed:oracle_error, "Type", values_to = "Error") %>% mutate(Type = factor(Type))
levels(all_error_plot$Type) <- c("with_E","with_E_error", "without_E")
all_error_plot %>% ggplot(aes(factor(MAF_level))) + geom_point(aes(y = Error, color = Type), size = 3) + geom_hline(aes(yintercept = 0.05)) +  geom_pointrange(aes(y = 0.05, ymin = lower, ymax = upper), size = 0.1)
power3
power3
power3$proposed_1
hist(power3$proposed_1)
hist(power3$proposed_1,breaks = 30)
hist(power3$proposed_2,breaks = 30)
hist(power3$oracle,breaks = 30)
hist(power3$oracle_error,breaks = 30)
